@startuml

' STATIC
' Generated by CTP - https://github.com/samuelroland/ctp

' Style
hide empty members
skinparam classAttributeIconSize 0

' Additions

' REMOVE

' ENDSTATIC

class RegionOfInterest {
	- x: int
	- y: int
	- w: int
	- h: int
	+ x1(): int
	+ x2(): int
	+ y1(): int
	+ y2(): int
	+ x(): int
	+ h(): int
	+ w(): int
	+ y(): int
}


class GroundCell {
	+ isWalkable(): boolean
	+ getSprite(): Sprite
}

class WallSprite {
	- {static} WALL_COLOR: Color
	+ slice(roi: RegionOfInterest): Sprite
}


class Main {
	+ {static} main(args: String[]): void
}

abstract class Cell {
	- occupants: Set<Entity>
	- neighbors: Map<Direction,Cell>
	+ getNeighbor(direction: Direction): Cell
	+ linkNeighbor(direction: Direction, cell: Cell): void
	+ getOccupants(): Collection<Entity>
	+ addOccupant(entity: Entity): void
	+ removeOccupant(entity: Entity): void
	+ {abstract}isWalkable(): boolean
	+ {abstract}getSprite(): Sprite
}


abstract class AbstractInteractionVisitor {
	+ interactWith(player: Player): void
	+ interactWith(circleEntity: CircleEntity): void
	+ interactWith(triangleEntity: TriangleEntity): void
	+ interactWith(pacmanEntity: PacmanEntity): void
}

abstract class SpriteRegister {
	- spriteCache: Map<String,Sprite>
	+ loadSprite(resource: String): Sprite
	+ createAnimation(resource: Sprite, frames: int, delay: int): AnimatedSprite
	- loadResource(resource: String): Sprite
}


class Player {
}
abstract class Ghost {
}
class ImageSprite {
	- image: Image
	+ draw(graphics: Graphics, x: int, y: int, width: int, height: int): void
	+ slice(roi: RegionOfInterest): Sprite
	+ getWidth(): int
	+ getHeight(): int
	- withinBounds(x: int, y: int): boolean
}


class Board {
	- cells: Cell[][]
	+ getWidth(): int
	+ getHeight(): int
	+ getCell(x: int, y: int): Cell
	+ withinBounds(x: int, y: int): boolean
}


class DiscreteCoordinates {
	- x: int
	- y: int
	+ {static} ORIGIN: DiscreteCoordinates
	+ left(): DiscreteCoordinates
	+ right(): DiscreteCoordinates
	+ up(): DiscreteCoordinates
	+ down(): DiscreteCoordinates
	+ getNeighbours(): List<DiscreteCoordinates>
	+ equals(o: Object): boolean
	+ hashCode(): int
	+ x(): int
	+ y(): int
}


enum Direction {
	+ UP: 
	+ RIGHT: 
	+ DOWN: 
	+ LEFT: 
	- direction: Vector
	+ opposite(): Direction
	+ toVector(): Vector
	+ {static} fromInt(index: int): Direction
	+ {static} fromVector(v: Vector): Direction
	+ toString(): String
}


class GameWindow {
	- {static} INSTANCE: GameWindow
	- frame: JFrame
	- contentPane: GraphicsPanel
	- player: Player
	+ {static} getInstance(): GameWindow
	+ spawn(entity: Drawable): void
	+ despawn(entity: Entity): void
	+ implode(): void
	+ show(): void
	+ update(): void
}


class GameWindow$GraphicsPanel {
	- entities: List<Drawable>
	- pacmanBg: BufferedImage
	- useBackground: boolean
	# paintComponent(g: Graphics): void
}


class GameWindow$PlayerKeyListener {
	+ keyPressed(e: KeyEvent): void
	+ shiftCoordinates(e: KeyEvent, orig: DiscreteCoordinates): DiscreteCoordinates
}

interface InteractionVisitor {
	~ interactWith(player: Player): void
	~ interactWith(circleEntity: CircleEntity): void
	~ interactWith(triangleEntity: TriangleEntity): void
	~ interactWith(pacmanEntity: PacmanEntity): void
}

class DefaultSprite {
	+ draw(graphics: Graphics, x: int, y: int, width: int, height: int): void
	+ slice(roi: RegionOfInterest): Sprite
	+ getWidth(): int
	+ getHeight(): int
}

class WallCell {
	+ isWalkable(): boolean
	+ getSprite(): Sprite
}

class Vector {
	- x: float
	- y: float
	+ {static} EPSILON: double
	+ {static} ZERO: Vector
	+ {static} X: Vector
	+ {static} Y: Vector
	+ x(): float
	+ y(): float
	+ getLength(): float
	+ getAngle(): float
	+ opposite(): Vector
	+ add(other: Vector): Vector
	+ add(x: float, y: float): Vector
	+ sub(other: Vector): Vector
	+ sub(x: float, y: float): Vector
	+ mul(other: Vector): Vector
	+ mul(x: float, y: float): Vector
	+ mul(s: float): Vector
	+ div(other: Vector): Vector
	+ div(x: float, y: float): Vector
	+ div(s: float): Vector
	+ dot(other: Vector): float
	+ min(other: Vector): Vector
	+ min(): float
	+ max(other: Vector): Vector
	+ max(): float
	+ normalized(): Vector
	+ resized(length: float): Vector
	+ mirrored(normal: Vector): Vector
	+ rotated(angle: double): Vector
	+ clockwise(): Vector
	+ counterClockwise(): Vector
	+ round(): Vector
	+ mixed(other: Vector, factor: float): Vector
}


interface Sprite {
	~ draw(graphics: Graphics, x: int, y: int, width: int, height: int): void
	~ slice(roi: RegionOfInterest): Sprite
	~ getWidth(): int
	~ getHeight(): int
}

abstract class Entity {
	- cell: Cell
	- direction: Direction
	+ getDirection(): Direction
	+ setDirection(direction: Direction): void
	+ getCell(): Cell
	+ setCell(cell: Cell): void
	+ leaveCell(): void
	+ {abstract}getSprite(): Sprite
}


class PacmanSprites {
	- {static} INSTANCE: PacmanSprites
	+ getWall(): Sprite
	+ getGround(): Sprite
	+ getPellet(): Sprite
	+ {static} getInstance(): PacmanSprites
}


class GroundSprite {
	- {static} GROUND_COLOR: Color
	+ slice(roi: RegionOfInterest): Sprite
}


class AnimatedSprite {
	- {static} ANIMATION_END: Sprite
	- frames: Sprite[]
	- delay: int
	- currentFrame: int
	- looping: boolean
	- animating: boolean
	- lastUpdate: long
	+ start(): void
	+ stop(): void
	+ restart(): void
	- getCurrentFrame(): Sprite
	- update(): void
	+ draw(graphics: Graphics, x: int, y: int, width: int, height: int): void
	+ slice(roi: RegionOfInterest): Sprite
	+ getWidth(): int
	+ getHeight(): int
}


class ColorSprite {
	- color: Color
	+ draw(graphics: Graphics, x: int, y: int, width: int, height: int): void
	+ slice(roi: RegionOfInterest): Sprite
	+ getWidth(): int
	+ getHeight(): int
}




Cell <|-- GroundCell
ColorSprite <|-- WallSprite
InteractionVisitor <|.. AbstractInteractionVisitor
Entity <|-- Player
Entity <|-- Ghost
Sprite <|.. ImageSprite
GameWindow +-- GameWindow$GraphicsPanel
JPanel <|-- GameWindow$GraphicsPanel
GameWindow +-- GameWindow$PlayerKeyListener
KeyAdapter <|-- GameWindow$PlayerKeyListener
Sprite <|.. DefaultSprite
Cell <|-- WallCell
SpriteRegister <|-- PacmanSprites
ColorSprite <|-- GroundSprite
Sprite <|.. AnimatedSprite
Sprite <|.. ColorSprite
@enduml
