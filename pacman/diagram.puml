@startuml

' STATIC
' Generated by CTP - https://github.com/samuelroland/ctp

' Style
hide empty members
skinparam classAttributeIconSize 0
skinparam nodesep 20

' Additions
remove Main
Entity -> Cell: initial >
Entity "1"-left>"1" Direction: direction >
Cell "todo"-"*" Cell: neighbors >
Cell "1"-left"*" Entity: occupants >
LevelBuilder "1"-d->"*" Cell: cells >
LevelBuilder "1"-d>"*" Ghost: ghosts >
LevelBuilder "1"-d>"*" Player: players >
Board "1"-d->"*" Cell: cells >

DefaultSprite -[hidden]d- ColorSprite
ColorSprite -[hidden]- ImageSprite
DefaultSprite -[hidden] AnimatedSprite

together {
    class Vector
    class RegionOfInterest
    class RandomGenerator
    class MapParser
    class Pathfinding
    class Node
}

' Pathfinding - Interactable

' SpriteRegister -left- Interactable



' REMOVE
'#General remove diagrams

'Delete subclasses prefix ending in $
' [A-Z][a-z]+\$

' ENDSTATIC
class PlayerInvincibleVisitor {
	- {static} INVINCIBLE_DURATION: int
	- {static} EXECUTOR: ScheduledExecutorService
	- endFuture: ScheduledFuture<?>
	- blinkFuture: ScheduledFuture<?>
	+ isScary(): boolean
	+ isInteractable(): boolean
	+ eatSuperPellet(): void
	+ kill(): void
	+ dispose(): void
	+ startTimer(): void
	+ endInvincibility(): void
	+ visit(vader: Vader): void
	+ visit(luke: Luke): void
	+ visit(sith: Sith): void
	+ visit(stormTrooper: StormTrooper): void
	+ visit(bobaFett: BobaFett): void
}


class GroundCell {
	+ isWalkableBy(_any: Entity): boolean
	+ getSprite(): Sprite
}

class StormTrooper {
	- {static} EDIBLE_SPRITES: Map<Direction,AnimatedSprite>
	- {static} INVINCIBLE_SPRITES: Map<Direction,AnimatedSprite>
	- handler: InteractionVisitor
	~ getEdibleSprites(): Map<Direction,AnimatedSprite>
	~ getInvincibleSprites(): Map<Direction,AnimatedSprite>
	+ accept(v: InteractionVisitor): void
	+ interactWith(other: Interactable): void
	+ toString(): String
}


class StormStormTrooperInteractionVisitor {
}
class PlayerDeadVisitor {
	- deathSprites: AnimatedSprite
	+ isScary(): boolean
	+ isInteractable(): boolean
	+ eatSuperPellet(): void
	+ kill(): void
	+ getSprite(): Sprite
}


class SuperPellet {
	+ getSprite(): Sprite
	+ accept(v: InteractionVisitor): void
}

class Main {
	+ {static} main(args: String[]): void
}

abstract class Cell {
	- occupants: Set<Entity>
	- neighbors: Map<Direction,Cell>
	+ getNeighbor(direction: Direction): Cell
	+ linkNeighbor(direction: Direction, cell: Cell): void
	+ getOccupants(): Collection<Entity>
	+ addOccupant(entity: Entity): void
	+ removeOccupant(entity: Entity): void
	+ {abstract}isWalkableBy(entity: Entity): boolean
	+ {abstract}getSprite(): Sprite
}


class PlayerNormalVisitor {
	+ isScary(): boolean
	+ isInteractable(): boolean
	+ eatSuperPellet(): void
	+ kill(): void
	+ visit(bobaFett: BobaFett): void
}

class Level {
	- moveLock: Object
	- startLock: Object
	- board: Board
	- entityThreads: Map<MovableEntity,ScheduledExecutorService>
	- players: List<Player>
	- observers: List<LevelObserver>
	- running: boolean
	+ getBoard(): Board
	+ getPlayer(index: int): Player
	+ isRunning(): boolean
	+ move(entity: MovableEntity, direction: Direction): void
	+ start(): void
	+ stop(): void
	- startThreads(): void
	- stopThreads(): void
	- updateObservers(): void
	+ addObserver(observer: LevelObserver): void
	+ removeObserver(observer: LevelObserver): void
	+ hasAlivePlayer(): boolean
	+ hasScaryPlayer(): boolean
	+ toggleBlinking(): void
	+ countRemainingPellets(): long
}


class EntityTask {
	- entity: MovableEntity
	+ run(): void
}


interface LevelObserver {
	+ onLevelWon(): void
	+ onLevelLost(): void
}

abstract class Ghost {
	- pathToTarget: List<Direction>
	- pathIndex: int
	- moveCounter: int
	- blinking: boolean
	- goingHome: boolean
	- pathUpdateInterval: int
	~ {abstract}getEdibleSprites(): Map<Direction,AnimatedSprite>
	~ {abstract}getInvincibleSprites(): Map<Direction,AnimatedSprite>
	+ getSprite(): Sprite
	+ toggleBlinking(): void
	+ getMoveInterval(): int
	+ getNextMove(): Direction
	+ sendHome(): void
	- updatePathTo(target: Cell): void
	- updatePathToHome(): void
	- updatePathToPlayer(): void
	+ getLayer(): int
}


class GhostInteractionVisitor {
	+ visit(player: Player): void
}

class SpeechBubble {
	- text: String
	- sprite: Sprite
	+ getSprite(): Sprite
	+ getLayer(): int
	+ accept(v: InteractionVisitor): void
}


class SpeechSpeechBubbleSprite {
	- {static} OPACITY_INTERVAL: int
	- backgroundSprite: Sprite
	- lastUpdate: long
	- opacity: int
	+ draw(graphics: Graphics, x: int, y: int, width: int, height: int): void
	+ slice(roi: RegionOfInterest): Sprite
	+ getWidth(): int
	+ getHeight(): int
}


interface Interactor {
	+ interactWith(other: Interactable): void
}

enum Direction {
	+ UP: 
	+ RIGHT: 
	+ DOWN: 
	+ LEFT: 
	- direction: Vector
	+ dx(): int
	+ dy(): int
	+ opposite(): Direction
	+ toVector(): Vector
	+ {static} fromInt(index: int): Direction
	+ {static} fromVector(v: Vector): Direction
	+ {static} random(): Direction
	+ toString(): String
}


class RandomGenerator {
	- {static} instance: Random
	+ {static} getInstance(): Random
}


interface InteractionVisitor {
	+ visit(player: Player): void
	+ visit(pellet: Pellet): void
	+ visit(pellet: SuperPellet): void
	+ visit(vader: Vader): void
	+ visit(luke: Luke): void
	+ visit(sith: Sith): void
	+ visit(stormTrooper: StormTrooper): void
	+ visit(bobaFett: BobaFett): void
}

class BobaFett {
	- {static} EDIBLE_SPRITES: Map<Direction,AnimatedSprite>
	- {static} INVINCIBLE_SPRITES: Map<Direction,AnimatedSprite>
	- moveInterval: int
	~ getEdibleSprites(): Map<Direction,AnimatedSprite>
	~ getInvincibleSprites(): Map<Direction,AnimatedSprite>
	+ moveFaster(): void
	+ getMoveInterval(): int
	+ accept(v: InteractionVisitor): void
	+ interactWith(other: Interactable): void
	+ toString(): String
}


interface Interactable {
	+ accept(v: InteractionVisitor): void
}

class Pathfinding {
	+ {static} findNearestEntity(entityClass: Class<T>, start: Cell): T
	+ {static} findShortestPath(start: Cell, target: Cell, entity: Entity): List<Direction>
}

class Node {
	~ direction: Direction
	~ cell: Cell
	~ parent: Node
	~ getPath(): List<Direction>
}


class DefaultSprite {
	+ draw(graphics: Graphics, x: int, y: int, width: int, height: int): void
	+ slice(roi: RegionOfInterest): Sprite
	+ getWidth(): int
	+ getHeight(): int
}

class WallCell {
	+ isWalkableBy(_any: Entity): boolean
	+ getSprite(): Sprite
}

class Vector {
	- x: float
	- y: float
	+ {static} EPSILON: double
	+ {static} ZERO: Vector
	+ {static} X: Vector
	+ {static} Y: Vector
	+ x(): float
	+ y(): float
	+ getLength(): float
	+ getAngle(): float
	+ opposite(): Vector
	+ add(other: Vector): Vector
	+ add(x: float, y: float): Vector
	+ sub(other: Vector): Vector
	+ sub(x: float, y: float): Vector
	+ mul(other: Vector): Vector
	+ mul(x: float, y: float): Vector
	+ mul(s: float): Vector
	+ div(other: Vector): Vector
	+ div(x: float, y: float): Vector
	+ div(s: float): Vector
	+ dot(other: Vector): float
	+ min(other: Vector): Vector
	+ min(): float
	+ max(other: Vector): Vector
	+ max(): float
	+ normalized(): Vector
	+ resized(length: float): Vector
	+ mirrored(normal: Vector): Vector
	+ rotated(angle: double): Vector
	+ clockwise(): Vector
	+ counterClockwise(): Vector
	+ round(): Vector
	+ mixed(other: Vector, factor: float): Vector
}


class ColorSprite {
	- color: Color
	+ draw(graphics: Graphics, x: int, y: int, width: int, height: int): void
	+ slice(roi: RegionOfInterest): Sprite
	+ getWidth(): int
	+ getHeight(): int
}


class RegionOfInterest {
	- x: int
	- y: int
	- w: int
	- h: int
	+ x1(): int
	+ x2(): int
	+ y1(): int
	+ y2(): int
	+ w(): int
	+ x(): int
	+ h(): int
	+ y(): int
}


class DoorCell {
	+ isWalkableBy(entity: Entity): boolean
	+ getSprite(): Sprite
}

class Pellet {
	+ getLayer(): int
	+ getSprite(): Sprite
	+ accept(v: InteractionVisitor): void
}

class MapParser {
	+ {static} parse(resourcePath: String): Level
	+ {static} parse(inputStream: InputStream): Level
	+ {static} parse(map: char[][]): Level
}

class GameFrame {
	- {static} FRAME_RATE: int
	- panel: LevelPanel
	+ start(): void
}


class GameKeyListener {
	- keybindings: Map<Integer,Consumer<Level>>
	+ keyPressed(e: KeyEvent): void
}


class Sith {
	- {static} EDIBLE_SPRITES: Map<Direction,AnimatedSprite>
	- {static} INVINCIBLE_SPRITES: Map<Direction,AnimatedSprite>
	- handler: InteractionVisitor
	~ getEdibleSprites(): Map<Direction,AnimatedSprite>
	~ getInvincibleSprites(): Map<Direction,AnimatedSprite>
	+ accept(v: InteractionVisitor): void
	+ interactWith(other: Interactable): void
	+ toString(): String
}


class SithInteractionVisitor {
}
abstract class MovableEntity {
	+ {abstract}getMoveInterval(): int
	+ {abstract}getNextMove(): Direction
	+ setCell(cell: Cell): void
}

abstract class AbstractInteractionVisitor {
	+ visit(player: Player): void
	+ visit(pellet: Pellet): void
	+ visit(superPellet: SuperPellet): void
	+ visit(vader: Vader): void
	+ visit(luke: Luke): void
	+ visit(sith: Sith): void
	+ visit(stormTrooper: StormTrooper): void
	+ visit(bobaFett: BobaFett): void
}

class Luke {
	- {static} SPRITES: Map<Direction,AnimatedSprite>
	- handler: InteractionVisitor
	~ getEdibleSprites(): Map<Direction,AnimatedSprite>
	~ getInvincibleSprites(): Map<Direction,AnimatedSprite>
	+ accept(v: InteractionVisitor): void
	+ interactWith(other: Interactable): void
	+ toString(): String
}


class LukeInteractionVisitor {
}
abstract class SpriteRegister {
	- spriteCache: Map<String,Sprite>
	+ loadSprite(resource: String): Sprite
	+ createAnimation(resource: Sprite, frames: int, delay: int, loop: boolean): AnimatedSprite
	- loadResource(resource: String): Sprite
}


class ButtonPanel {
}
class Player {
	- {static} DEFAULT_INTERVAL: int
	- handler: PlayerVisitor
	- requestedDirection: Direction
	- moveInterval: int
	+ isAlive(): boolean
	+ isScary(): boolean
	+ getSprite(): Sprite
	+ setHandler(handler: PlayerVisitor): void
	+ setRequestedDirection(requestedDirection: Direction): void
	+ getMoveInterval(): int
	+ setMoveInterval(moveInterval: int): void
	+ getNextMove(): Direction
	+ kill(): void
	+ getLayer(): int
	+ accept(v: InteractionVisitor): void
	+ interactWith(other: Interactable): void
	+ toString(): String
}


abstract class PlayerVisitor {
	- player: Player
	- sprites: Map<Direction,AnimatedSprite>
	# getPlayer(): Player
	+ getSprite(): Sprite
	# setRedSprites(): void
	+ {abstract}isScary(): boolean
	+ {abstract}isInteractable(): boolean
	+ {abstract}eatSuperPellet(): void
	+ {abstract}kill(): void
	+ dispose(): void
	+ visit(pellet: Pellet): void
	+ visit(superPellet: SuperPellet): void
}


class ImageSprite {
	- image: Image
	+ draw(graphics: Graphics, x: int, y: int, width: int, height: int): void
	+ slice(roi: RegionOfInterest): Sprite
	+ getWidth(): int
	+ getHeight(): int
}


class Board {
	- cells: Cell[][]
	+ streamCells(): Stream<Cell>
	+ getWidth(): int
	+ getHeight(): int
	+ getCell(x: int, y: int): Cell
	+ withinBounds(x: int, y: int): boolean
	+ {static} create(cells: Cell[][]): Board
}


class LevelPanel {
	+ {static} SQUARE_SIZE: int
	- level: Level
	+ getLevel(): Level
	# paintComponent(g: Graphics): void
	- render(board: Board, g: Graphics2D): void
	- renderCell(cell: Cell, g: Graphics2D, x: int, y: int, width: int, height: int): void
}


class GameWindow {
	- player: Player
	- level: Level
	- frame: GameFrame
	+ begin(): void
	+ getActiveLevel(): Level
	+ onLevelWon(): void
	+ onLevelLost(): void
	+ {static} getInstance(): GameWindow
}


class GameInstanceHolder {
	- {static} INSTANCE: GameWindow
}

class Vader {
	- {static} EDIBLE_SPRITES: Map<Direction,AnimatedSprite>
	- {static} INVINCIBLE_SPRITES: Map<Direction,AnimatedSprite>
	- handler: InteractionVisitor
	~ getEdibleSprites(): Map<Direction,AnimatedSprite>
	~ getInvincibleSprites(): Map<Direction,AnimatedSprite>
	+ accept(v: InteractionVisitor): void
	+ interactWith(other: Interactable): void
	+ toString(): String
}


class VaderInteractionVisitor {
	+ visit(luke: Luke): void
}

interface Sprite {
	+ draw(graphics: Graphics, x: int, y: int, width: int, height: int): void
	+ slice(roi: RegionOfInterest): Sprite
	+ getWidth(): int
	+ getHeight(): int
}

abstract class Entity {
	- {static} SPEECH_DEBOUNCE: int
	- cell: Cell
	- direction: Direction
	- lastSpeech: long
	- initialCell: Cell
	+ getDirection(): Direction
	+ setDirection(direction: Direction): void
	+ getInitialCell(): Cell
	+ getCell(): Cell
	# setCell(cell: Cell): void
	+ leaveCell(): void
	+ spawnSpeech(text: String): void
	+ {abstract}getLayer(): int
	+ {abstract}getSprite(): Sprite
}


class PacmanSprites {
	- {static} ANIMATION_DELAY: int
	- {static} DIRECTED_ORDER: Direction[]
	- {static} INSTANCE: PacmanSprites
	+ getPacman(): Map<Direction,AnimatedSprite>
	+ getRedPacman(): Map<Direction,AnimatedSprite>
	+ getPacmanDeath(): AnimatedSprite
	+ getBackground(): Sprite
	+ getPellet(): Sprite
	+ getSuperPellet(): Sprite
	+ getSpeechBackground(): Sprite
	+ getRedGhost(): Map<Direction,AnimatedSprite>
	+ getSith(): Map<Direction,AnimatedSprite>
	+ getEdibleSith(): Map<Direction,AnimatedSprite>
	+ getLuke(): Map<Direction,AnimatedSprite>
	+ getVader(): Map<Direction,AnimatedSprite>
	+ getEdibleVader(): Map<Direction,AnimatedSprite>
	+ getStormTrooper(): Map<Direction,AnimatedSprite>
	+ getEdibleStormTrooper(): Map<Direction,AnimatedSprite>
	+ getBobaFett(): Map<Direction,AnimatedSprite>
	+ getEdibleBobaFett(): Map<Direction,AnimatedSprite>
	- loadDirectedSprites(resource: String, frames: int, spriteWidth: int, \n\t spriteHeight: int): Map<Direction,AnimatedSprite>
	+ {static} getInstance(): PacmanSprites
}


class LevelBuilder {
	- cells: Cell[][]
	- ghosts: List<Ghost>
	- players: List<Player>
	+ {static} start(width: int, height: int): LevelBuilder
	+ addWall(x: int, y: int): LevelBuilder
	+ addGround(x: int, y: int): LevelBuilder
	+ addDoor(x: int, y: int): LevelBuilder
	+ addPellet(x: int, y: int): LevelBuilder
	+ addSuperPellet(x: int, y: int): LevelBuilder
	+ addGhost(x: int, y: int, ghostFactory: Function<Cell,Ghost>): LevelBuilder
	+ addPlayer(x: int, y: int): LevelBuilder
	+ build(): Level
}


class AnimatedSprite {
	- {static} ANIMATION_END: Sprite
	- {static} DEFAULT_BLINK_DELAY: int
	- visible: boolean
	- frames: Sprite[]
	- delay: int
	- currentFrame: int
	- looping: boolean
	- animating: boolean
	- blinking: boolean
	- blinkDelay: int
	- lastUpdate: long
	- lastBlink: long
	+ restart(): void
	+ start(): void
	+ stop(): void
	+ startBlinking(): void
	+ stopBlinking(): void
	- updateBlinking(): void
	- updateAnimation(): void
	+ draw(graphics: Graphics, x: int, y: int, width: int, height: int): void
	+ slice(roi: RegionOfInterest): Sprite
	+ getWidth(): int
	+ getHeight(): int
	- getCurrentFrame(): Sprite
}




PlayerVisitor <|-- PlayerInvincibleVisitor
Cell <|-- GroundCell
Ghost <|-- StormTrooper
StormTrooper +-- StormStormTrooperInteractionVisitor
GhostInteractionVisitor <|-- StormStormTrooperInteractionVisitor
PlayerVisitor <|-- PlayerDeadVisitor
Pellet <|-- SuperPellet
PlayerVisitor <|-- PlayerNormalVisitor
Level +-- EntityTask
Runnable <|.. EntityTask
Level +-- LevelObserver
Interactor <|.. Ghost
MovableEntity <|-- Ghost
Ghost +-- GhostInteractionVisitor
AbstractInteractionVisitor <|-- GhostInteractionVisitor
Entity <|-- SpeechBubble
SpeechBubble +-- SpeechSpeechBubbleSprite
Sprite <|.. SpeechSpeechBubbleSprite
Ghost <|-- BobaFett
Pathfinding +-- Node
Sprite <|.. DefaultSprite
Cell <|-- WallCell
Sprite <|.. ColorSprite
Cell <|-- DoorCell
Entity <|-- Pellet
JFrame <|-- GameFrame
GameFrame +-- GameKeyListener
KeyAdapter <|-- GameKeyListener
Ghost <|-- Sith
Sith +-- SithInteractionVisitor
GhostInteractionVisitor <|-- SithInteractionVisitor
Entity <|-- MovableEntity
InteractionVisitor <|.. AbstractInteractionVisitor
Ghost <|-- Luke
Luke +-- LukeInteractionVisitor
GhostInteractionVisitor <|-- LukeInteractionVisitor
JPanel <|-- ButtonPanel
Interactor <|.. Player
MovableEntity <|-- Player
AbstractInteractionVisitor <|-- PlayerVisitor
Sprite <|.. ImageSprite
JPanel <|-- LevelPanel
LevelObserver <|.. GameWindow
GameWindow +-- GameInstanceHolder
Ghost <|-- Vader
Vader +-- VaderInteractionVisitor
GhostInteractionVisitor <|-- VaderInteractionVisitor
Interactable <|.. Entity
SpriteRegister <|-- PacmanSprites
Sprite <|.. AnimatedSprite
@enduml
