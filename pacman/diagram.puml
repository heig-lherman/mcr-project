@startuml

' STATIC
' Generated by CTP - https://github.com/samuelroland/ctp

' Style
hide empty members
skinparam classAttributeIconSize 0

' Additions
hide Main

' Board "1"-"*" Cell: contains >
' Entity "1"-"1" Cell: placed on >
' SpriteRegister "1"-"*" Sprite: puts in cache >


' REMOVE

' ENDSTATIC
class GroundCell {
	+ isWalkable(): boolean
	+ getSprite(): Sprite
}

class SuperPellet {
	+ getSprite(): Sprite
	+ acceptInteraction(v: InteractionVisitor): void
}

class Main {
	+ {static} main(args: String[]): void
}

abstract class Cell {
	- occupants: Set<Entity>
	- neighbors: Map<Direction,Cell>
	+ getNeighbor(direction: Direction): Cell
	+ linkNeighbor(direction: Direction, cell: Cell): void
	+ getOccupants(): Collection<Entity>
	+ addOccupant(entity: Entity): void
	+ removeOccupant(entity: Entity): void
	+ {abstract}isWalkable(): boolean
	+ {abstract}getSprite(): Sprite
}


class Level {
	- moveLock: Object
	- startLock: Object
	- board: Board
	- entityThreads: Map<MovableEntity,ExecutorService>
	- players: List<Player>
	- observers: List<LevelObserver>
	- running: boolean
	+ getBoard(): Board
	+ getPlayer(index: int): Player
	+ move(entity: Entity, direction: Direction): void
	+ start(): void
	+ stop(): void
	- startThreads(): void
	- stopThreads(): void
	- updateObservers(): void
	+ hasAlivePlayer(): boolean
	+ countRemainingPellets(): long
}


class Level$EntityTask {
	- entity: MovableEntity
	+ run(): void
}


interface Level$LevelObserver {
	~ onLevelWon(): void
	~ onLevelLost(): void
}

abstract class Ghost {
	- directedSprites: Map<Direction,? extends Sprite>
	+ getSprite(): Sprite
	+ getMoveInterval(): int
}


class DiscreteCoordinates {
	- x: int
	- y: int
	+ {static} ORIGIN: DiscreteCoordinates
	+ left(): DiscreteCoordinates
	+ right(): DiscreteCoordinates
	+ up(): DiscreteCoordinates
	+ down(): DiscreteCoordinates
	+ getNeighbours(): List<DiscreteCoordinates>
	+ equals(o: Object): boolean
	+ hashCode(): int
	+ x(): int
	+ y(): int
}


interface Interactor {
	~ interactWith(other: Interactable): void
}

enum Direction {
	+ UP: 
	+ RIGHT: 
	+ DOWN: 
	+ LEFT: 
	- direction: Vector
	+ dx(): int
	+ dy(): int
	+ opposite(): Direction
	+ toVector(): Vector
	+ {static} fromInt(index: int): Direction
	+ {static} fromVector(v: Vector): Direction
	+ {static} random(): Direction
	+ toString(): String
}


class RandomGenerator {
	- {static} instance: Random
	+ {static} getInstance(): Random
}


interface InteractionVisitor {
	~ interactWith(player: Player): void
	~ interactWith(pellet: Pellet): void
	~ interactWith(pellet: SuperPellet): void
	~ interactWith(ghost: RandomGhost): void
}

interface Interactable {
	~ acceptInteraction(v: InteractionVisitor): void
}

class DefaultSprite {
	+ draw(graphics: Graphics, x: int, y: int, width: int, height: int): void
	+ slice(roi: RegionOfInterest): Sprite
	+ getWidth(): int
	+ getHeight(): int
}

class WallCell {
	+ isWalkable(): boolean
	+ getSprite(): Sprite
}

class Vector {
	- x: float
	- y: float
	+ {static} EPSILON: double
	+ {static} ZERO: Vector
	+ {static} X: Vector
	+ {static} Y: Vector
	+ x(): float
	+ y(): float
	+ getLength(): float
	+ getAngle(): float
	+ opposite(): Vector
	+ add(other: Vector): Vector
	+ add(x: float, y: float): Vector
	+ sub(other: Vector): Vector
	+ sub(x: float, y: float): Vector
	+ mul(other: Vector): Vector
	+ mul(x: float, y: float): Vector
	+ mul(s: float): Vector
	+ div(other: Vector): Vector
	+ div(x: float, y: float): Vector
	+ div(s: float): Vector
	+ dot(other: Vector): float
	+ min(other: Vector): Vector
	+ min(): float
	+ max(other: Vector): Vector
	+ max(): float
	+ normalized(): Vector
	+ resized(length: float): Vector
	+ mirrored(normal: Vector): Vector
	+ rotated(angle: double): Vector
	+ clockwise(): Vector
	+ counterClockwise(): Vector
	+ round(): Vector
	+ mixed(other: Vector, factor: float): Vector
}


class GroundSprite {
	- {static} GROUND_COLOR: Color
	+ slice(roi: RegionOfInterest): Sprite
}


class ColorSprite {
	- color: Color
	+ draw(graphics: Graphics, x: int, y: int, width: int, height: int): void
	+ slice(roi: RegionOfInterest): Sprite
	+ getWidth(): int
	+ getHeight(): int
}


class RegionOfInterest {
	- x: int
	- y: int
	- w: int
	- h: int
	+ x1(): int
	+ x2(): int
	+ y1(): int
	+ y2(): int
	+ w(): int
	+ x(): int
	+ h(): int
	+ y(): int
}


class Pellet {
	+ getSprite(): Sprite
	+ acceptInteraction(v: InteractionVisitor): void
}

class WallSprite {
	- {static} WALL_COLOR: Color
	+ slice(roi: RegionOfInterest): Sprite
}


class MapParser {
	+ {static} parse(resourcePath: String): Level
	+ {static} parse(inputStream: InputStream): Level
	+ {static} parse(map: char[][]): Level
}

class GameFrame {
	- {static} FRAME_RATE: int
	- panel: LevelPanel
	+ start(): void
}


class GameFrame$KeyListener {
	- keybindings: Map<Integer,Consumer<Level>>
	+ keyPressed(e: KeyEvent): void
}


abstract class MovableEntity {
	+ {abstract}getMoveInterval(): int
	+ {abstract}nextMove(): Direction
}

abstract class AbstractInteractionVisitor {
	+ interactWith(player: Player): void
	+ interactWith(pellet: Pellet): void
	+ interactWith(superPellet: SuperPellet): void
	+ interactWith(ghost: RandomGhost): void
}

abstract class SpriteRegister {
	- spriteCache: Map<String,Sprite>
	+ loadSprite(resource: String): Sprite
	+ createAnimation(resource: Sprite, frames: int, delay: int, loop: boolean): AnimatedSprite
	- loadResource(resource: String): Sprite
}


class ButtonPanel {
}
class Player {
	- normalHandler: InteractionVisitor
	- directedSprites: Map<Direction,AnimatedSprite>
	- deathSprites: AnimatedSprite
	- requestedDirection: Direction
	- alive: boolean
	+ isAlive(): boolean
	+ setRequestedDirection(requestedDirection: Direction): void
	+ getMoveInterval(): int
	+ nextMove(): Direction
	+ getSprite(): Sprite
	+ kill(): void
	+ acceptInteraction(v: InteractionVisitor): void
	+ interactWith(other: Interactable): void
}


class Player$NormalInteractionHandler {
	+ interactWith(pellet: Pellet): void
	+ interactWith(superPellet: SuperPellet): void
}

class ImageSprite {
	- image: Image
	+ draw(graphics: Graphics, x: int, y: int, width: int, height: int): void
	+ slice(roi: RegionOfInterest): Sprite
	+ getWidth(): int
	+ getHeight(): int
}


class Board {
	- cells: Cell[][]
	+ streamCells(): Stream<Cell>
	+ getWidth(): int
	+ getHeight(): int
	+ getCell(x: int, y: int): Cell
	+ withinBounds(x: int, y: int): boolean
	+ {static} create(cells: Cell[][]): Board
}


class LevelPanel {
	- {static} SQUARE_SIZE: int
	- level: Level
	+ getLevel(): Level
	# paintComponent(g: Graphics): void
	- render(board: Board, g: Graphics2D): void
	- renderCell(cell: Cell, g: Graphics2D, x: int, y: int, width: int, height: int): void
}


class GameWindow {
	- player: Player
	- level: Level
	- frame: GameFrame
	+ begin(): void
	+ onLevelWon(): void
	+ onLevelLost(): void
}


class RandomGhost {
	+ nextMove(): Direction
	+ acceptInteraction(v: InteractionVisitor): void
	+ interactWith(other: Interactable): void
}

interface Sprite {
	~ draw(graphics: Graphics, x: int, y: int, width: int, height: int): void
	~ slice(roi: RegionOfInterest): Sprite
	~ getWidth(): int
	~ getHeight(): int
}

abstract class Entity {
	- cell: Cell
	- direction: Direction
	+ getDirection(): Direction
	+ setDirection(direction: Direction): void
	+ getCell(): Cell
	+ setCell(cell: Cell): void
	+ leaveCell(): void
	+ {abstract}getSprite(): Sprite
}


class PacmanSprites {
	- {static} SPRITE_SIZE: int
	- {static} ANIMATION_DELAY: int
	- {static} DIRECTED_ORDER: Direction[]
	- {static} INSTANCE: PacmanSprites
	+ getPacman(): Map<Direction,AnimatedSprite>
	+ getPacmanDeath(): AnimatedSprite
	+ getWall(): Sprite
	+ getGround(): Sprite
	+ getPellet(): Sprite
	+ getSuperPellet(): Sprite
	+ getRedGhost(): Map<Direction,AnimatedSprite>
	- loadDirectedSprites(resource: String, frames: int): Map<Direction,AnimatedSprite>
	+ {static} getInstance(): PacmanSprites
}


class LevelBuilder {
	- cells: Cell[][]
	- ghosts: List<Ghost>
	- players: List<Player>
	+ {static} start(width: int, height: int): LevelBuilder
	+ addWall(x: int, y: int): LevelBuilder
	+ addGround(x: int, y: int): LevelBuilder
	+ addPellet(x: int, y: int): LevelBuilder
	+ addSuperPellet(x: int, y: int): LevelBuilder
	+ addGhost(x: int, y: int, ghost: Ghost): LevelBuilder
	+ addPlayer(x: int, y: int): LevelBuilder
	+ build(): Level
}


class AnimatedSprite {
	- {static} ANIMATION_END: Sprite
	- frames: Sprite[]
	- delay: int
	- currentFrame: int
	- looping: boolean
	- animating: boolean
	- lastUpdate: long
	+ start(): void
	+ stop(): void
	+ restart(): void
	- getCurrentFrame(): Sprite
	- update(): void
	+ draw(graphics: Graphics, x: int, y: int, width: int, height: int): void
	+ slice(roi: RegionOfInterest): Sprite
	+ getWidth(): int
	+ getHeight(): int
}




Cell <|-- GroundCell
Pellet <|-- SuperPellet
Level +-- Level$EntityTask
Runnable <|.. Level$EntityTask
Level +-- Level$LevelObserver
Interactor <|.. Ghost
MovableEntity <|-- Ghost
Sprite <|.. DefaultSprite
Cell <|-- WallCell
ColorSprite <|-- GroundSprite
Sprite <|.. ColorSprite
Entity <|-- Pellet
ColorSprite <|-- WallSprite
JFrame <|-- GameFrame
GameFrame +-- GameFrame$KeyListener
KeyAdapter <|-- GameFrame$KeyListener
Entity <|-- MovableEntity
InteractionVisitor <|.. AbstractInteractionVisitor
JPanel <|-- ButtonPanel
Interactor <|.. Player
MovableEntity <|-- Player
Player +-- Player$NormalInteractionHandler
AbstractInteractionVisitor <|-- Player$NormalInteractionHandler
Sprite <|.. ImageSprite
JPanel <|-- LevelPanel
LevelObserver <|.. GameWindow
Ghost <|-- RandomGhost
Interactable <|.. Entity
SpriteRegister <|-- PacmanSprites
Sprite <|.. AnimatedSprite
@enduml
