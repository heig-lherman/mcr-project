@startuml

' STATIC
' Generated by CTP - https://github.com/samuelroland/ctp
' NOTE: this is a simplified version of the diagram with only relevant classes to the visitor design pattern

' Style
hide empty members
skinparam classAttributeIconSize 0
skinparam ClassFontStyle bold
skinparam ClassAttributeFontSize 20

' Hide some elements for the simplified diagram - comment this to get the full
remove Level$EntityTask
remove Level*
remove *Cell*
remove *Sprite*
remove *Sprites
remove *Panel
remove GhostState
remove KeyAdapter
remove GameWindow*
remove Vector
remove RegionOfInterest
remove RandomGenerator
remove Direction
remove DiscreteCoordinates
remove Board
remove MapParser
remove Runnable
remove *Frame*
remove Pathfinding*
remove SpeechBubble*

' Links restructuration to remove all intermediate abstract classes and move all links up to top level interfaces
remove Main

'# Default implementations not related to the patterns, remove patterns are grouped with new links
remove AbstractInteractionVisitor
remove Ghost$GhostInteractionVisitor
remove GhostInteractionVisitor
InteractionVisitor <|.. StormTrooper$StormTrooperInteractionVisitor
InteractionVisitor <|.. Sith$SithInteractionVisitor
InteractionVisitor <|.. Luke$LukeInteractionVisitor
InteractionVisitor <|.. Vader$VaderInteractionVisitor
InteractionVisitor <|.. PlayerVisitor

remove MovableEntity
remove Entity
Interactable <|. Ghost
Interactable <|.. Player
Interactable <|.. Pellet

remove Interactor


' Additions

' REMOVE
'#General diagram
'TODO

'#Specifically for the simplified diagram !
' \t\+ toString().*\n
' \t[+-].*(SPRITE|Sprite).*\n
' \t[+~-].*(SPRITE|Sprite).*\n
' \t[+~-].*(Scheduled|Executor).*\n
' \t- \{static\} ([A-Z_])+:.*\n

' Ghost <\|\-\-.*\n
Ghost <|- StormTrooper
Ghost <|-- Vader
Ghost <|-- Luke
Ghost <|-- Sith
Ghost <|- BobaFett

' \t\+ interactWith\(other: Interactable\).*\n

' \t- handler: PlayerVisitor\n
' \t- player: Player\n
Player -- PlayerVisitor: handler >

'TODO: should we make links for Sith.handler and co ??

' ENDSTATIC
class PlayerInvincibleVisitor {
	+ isScary(): boolean
	+ isInteractable(): boolean
	+ eatSuperPellet(): void
	+ kill(): void
	+ dispose(): void
	+ startTimer(): void
	+ endInvincibility(): void
	+ visit(vader: Vader): void
	+ visit(luke: Luke): void
	+ visit(sith: Sith): void
	+ visit(stormTrooper: StormTrooper): void
	+ visit(bobaFett: BobaFett): void
}


class GroundCell {
	+ isWalkableBy(_any: Entity): boolean
}

class StormTrooper {
	- handler: InteractionVisitor
	+ accept(v: InteractionVisitor): void
}


class StormTrooper$StormTrooperInteractionVisitor {
}
class PlayerDeadVisitor {
	+ isScary(): boolean
	+ isInteractable(): boolean
	+ eatSuperPellet(): void
	+ kill(): void
}


class SuperPellet {
	+ accept(v: InteractionVisitor): void
}

class Main {
	+ {static} main(args: String[]): void
}

abstract class Cell {
	- occupants: Set<Entity>
	- neighbors: Map<Direction,Cell>
	+ getNeighbor(direction: Direction): Cell
	+ linkNeighbor(direction: Direction, cell: Cell): void
	+ getOccupants(): Collection<Entity>
	+ addOccupant(entity: Entity): void
	+ removeOccupant(entity: Entity): void
	+ {abstract}isWalkableBy(entity: Entity): boolean
}


class PlayerNormalVisitor {
	+ isScary(): boolean
	+ isInteractable(): boolean
	+ eatSuperPellet(): void
	+ kill(): void
	+ visit(bobaFett: BobaFett): void
}

class Level {
	- moveLock: Object
	- startLock: Object
	- board: Board
	- players: List<Player>
	- observers: List<LevelObserver>
	- running: boolean
	+ getBoard(): Board
	+ getPlayer(index: int): Player
	+ isRunning(): boolean
	+ move(entity: MovableEntity, direction: Direction): void
	+ start(): void
	+ stop(): void
	- startThreads(): void
	- stopThreads(): void
	- updateObservers(): void
	+ addObserver(observer: LevelObserver): void
	+ removeObserver(observer: LevelObserver): void
	+ hasAlivePlayer(): boolean
	+ hasScaryPlayer(): boolean
	+ toggleBlinking(): void
	+ countRemainingPellets(): long
}


class Level$EntityTask {
	- entity: MovableEntity
	+ run(): void
}


interface Level$LevelObserver {
	+ onLevelWon(): void
	+ onLevelLost(): void
}

abstract class Ghost {
	- pathToTarget: List<Direction>
	- pathIndex: int
	- moveCounter: int
	- blinking: boolean
	- goingHome: boolean
	- pathUpdateInterval: int
	+ toggleBlinking(): void
	+ getMoveInterval(): int
	+ getNextMove(): Direction
	+ sendHome(): void
	- updatePathTo(target: Cell): void
	- updatePathToHome(): void
	- updatePathToPlayer(): void
	+ getLayer(): int
}


class Ghost$GhostInteractionVisitor {
	+ visit(player: Player): void
}

class SpeechBubble {
	- text: String
	+ getLayer(): int
	+ accept(v: InteractionVisitor): void
}


class SpeechBubble$SpeechBubbleSprite {
	- lastUpdate: long
	- opacity: int
	+ draw(graphics: Graphics, x: int, y: int, width: int, height: int): void
	+ getWidth(): int
	+ getHeight(): int
}


interface Interactor {
}

enum Direction {
	+ UP: 
	+ RIGHT: 
	+ DOWN: 
	+ LEFT: 
	- direction: Vector
	+ dx(): int
	+ dy(): int
	+ opposite(): Direction
	+ toVector(): Vector
	+ {static} fromInt(index: int): Direction
	+ {static} fromVector(v: Vector): Direction
	+ {static} random(): Direction
}


class RandomGenerator {
	- {static} instance: Random
	+ {static} getInstance(): Random
}


interface InteractionVisitor {
	+ visit(player: Player): void
	+ visit(pellet: Pellet): void
	+ visit(pellet: SuperPellet): void
	+ visit(vader: Vader): void
	+ visit(luke: Luke): void
	+ visit(sith: Sith): void
	+ visit(stormTrooper: StormTrooper): void
	+ visit(bobaFett: BobaFett): void
}

class BobaFett {
	- moveInterval: int
	+ moveFaster(): void
	+ getMoveInterval(): int
	+ accept(v: InteractionVisitor): void
}


interface Interactable {
	+ accept(v: InteractionVisitor): void
}

class Pathfinding {
	+ {static} findNearestEntity(entityClass: Class<T>, start: Cell): T
	+ {static} findShortestPath(start: Cell, target: Cell, entity: Entity): List<Direction>
}

class Pathfinding$Node {
	~ direction: Direction
	~ cell: Cell
	~ parent: Node
	~ getPath(): List<Direction>
}


class DefaultSprite {
	+ draw(graphics: Graphics, x: int, y: int, width: int, height: int): void
	+ getWidth(): int
	+ getHeight(): int
}

class WallCell {
	+ isWalkableBy(_any: Entity): boolean
}

class Vector {
	- x: float
	- y: float
	+ {static} EPSILON: double
	+ {static} ZERO: Vector
	+ {static} X: Vector
	+ {static} Y: Vector
	+ x(): float
	+ y(): float
	+ getLength(): float
	+ getAngle(): float
	+ opposite(): Vector
	+ add(other: Vector): Vector
	+ add(x: float, y: float): Vector
	+ sub(other: Vector): Vector
	+ sub(x: float, y: float): Vector
	+ mul(other: Vector): Vector
	+ mul(x: float, y: float): Vector
	+ mul(s: float): Vector
	+ div(other: Vector): Vector
	+ div(x: float, y: float): Vector
	+ div(s: float): Vector
	+ dot(other: Vector): float
	+ min(other: Vector): Vector
	+ min(): float
	+ max(other: Vector): Vector
	+ max(): float
	+ normalized(): Vector
	+ resized(length: float): Vector
	+ mirrored(normal: Vector): Vector
	+ rotated(angle: double): Vector
	+ clockwise(): Vector
	+ counterClockwise(): Vector
	+ round(): Vector
	+ mixed(other: Vector, factor: float): Vector
}


class ColorSprite {
	- color: Color
	+ draw(graphics: Graphics, x: int, y: int, width: int, height: int): void
	+ getWidth(): int
	+ getHeight(): int
}


class RegionOfInterest {
	- x: int
	- y: int
	- w: int
	- h: int
	+ x1(): int
	+ x2(): int
	+ y1(): int
	+ y2(): int
	+ w(): int
	+ x(): int
	+ h(): int
	+ y(): int
}


class DoorCell {
	+ isWalkableBy(entity: Entity): boolean
}

class Pellet {
	+ getLayer(): int
	+ accept(v: InteractionVisitor): void
}

class MapParser {
	+ {static} parse(resourcePath: String): Level
	+ {static} parse(inputStream: InputStream): Level
	+ {static} parse(map: char[][]): Level
}

class GameFrame {
	- panel: LevelPanel
	+ start(): void
}


class GameFrame$KeyListener {
	- keybindings: Map<Integer,Consumer<Level>>
	+ keyPressed(e: KeyEvent): void
}


class Sith {
	- handler: InteractionVisitor
	+ accept(v: InteractionVisitor): void
}


class Sith$SithInteractionVisitor {
}
abstract class MovableEntity {
	+ {abstract}getMoveInterval(): int
	+ {abstract}getNextMove(): Direction
	+ setCell(cell: Cell): void
}

abstract class AbstractInteractionVisitor {
	+ visit(player: Player): void
	+ visit(pellet: Pellet): void
	+ visit(superPellet: SuperPellet): void
	+ visit(vader: Vader): void
	+ visit(luke: Luke): void
	+ visit(sith: Sith): void
	+ visit(stormTrooper: StormTrooper): void
	+ visit(bobaFett: BobaFett): void
}

class Luke {
	- handler: InteractionVisitor
	+ accept(v: InteractionVisitor): void
}


class Luke$LukeInteractionVisitor {
}
abstract class SpriteRegister {
}


class ButtonPanel {
}
class Player {
	- requestedDirection: Direction
	- moveInterval: int
	+ isAlive(): boolean
	+ isScary(): boolean
	+ setHandler(handler: PlayerVisitor): void
	+ setRequestedDirection(requestedDirection: Direction): void
	+ getMoveInterval(): int
	+ setMoveInterval(moveInterval: int): void
	+ getNextMove(): Direction
	+ kill(): void
	+ getLayer(): int
	+ accept(v: InteractionVisitor): void
}


abstract class PlayerVisitor {
	# getPlayer(): Player
	# setRedSprites(): void
	+ {abstract}isScary(): boolean
	+ {abstract}isInteractable(): boolean
	+ {abstract}eatSuperPellet(): void
	+ {abstract}kill(): void
	+ dispose(): void
	+ visit(pellet: Pellet): void
	+ visit(superPellet: SuperPellet): void
}


class ImageSprite {
	- image: Image
	+ draw(graphics: Graphics, x: int, y: int, width: int, height: int): void
	+ getWidth(): int
	+ getHeight(): int
}


class Board {
	- cells: Cell[][]
	+ streamCells(): Stream<Cell>
	+ getWidth(): int
	+ getHeight(): int
	+ getCell(x: int, y: int): Cell
	+ withinBounds(x: int, y: int): boolean
	+ {static} create(cells: Cell[][]): Board
}


class LevelPanel {
	+ {static} SQUARE_SIZE: int
	- level: Level
	+ getLevel(): Level
	# paintComponent(g: Graphics): void
	- render(board: Board, g: Graphics2D): void
	- renderCell(cell: Cell, g: Graphics2D, x: int, y: int, width: int, height: int): void
}


class GameWindow {
	- level: Level
	- frame: GameFrame
	+ begin(): void
	+ getActiveLevel(): Level
	+ onLevelWon(): void
	+ onLevelLost(): void
	+ {static} getInstance(): GameWindow
}


class GameWindow$InstanceHolder {
}

class Vader {
	- handler: InteractionVisitor
	+ accept(v: InteractionVisitor): void
}


class Vader$VaderInteractionVisitor {
	+ visit(luke: Luke): void
}

interface Sprite {
	+ draw(graphics: Graphics, x: int, y: int, width: int, height: int): void
	+ getWidth(): int
	+ getHeight(): int
}

abstract class Entity {
	- cell: Cell
	- direction: Direction
	- lastSpeech: long
	- initialCell: Cell
	+ getDirection(): Direction
	+ setDirection(direction: Direction): void
	+ getInitialCell(): Cell
	+ getCell(): Cell
	# setCell(cell: Cell): void
	+ leaveCell(): void
	+ spawnSpeech(text: String): void
	+ {abstract}getLayer(): int
}


class PacmanSprites {
}


class LevelBuilder {
	- cells: Cell[][]
	- ghosts: List<Ghost>
	- players: List<Player>
	+ {static} start(width: int, height: int): LevelBuilder
	+ addWall(x: int, y: int): LevelBuilder
	+ addGround(x: int, y: int): LevelBuilder
	+ addDoor(x: int, y: int): LevelBuilder
	+ addPellet(x: int, y: int): LevelBuilder
	+ addSuperPellet(x: int, y: int): LevelBuilder
	+ addGhost(x: int, y: int, ghostFactory: Function<Cell,Ghost>): LevelBuilder
	+ addPlayer(x: int, y: int): LevelBuilder
	+ build(): Level
}


class AnimatedSprite {
	- visible: boolean
	- delay: int
	- currentFrame: int
	- looping: boolean
	- animating: boolean
	- blinking: boolean
	- blinkDelay: int
	- lastUpdate: long
	- lastBlink: long
	+ restart(): void
	+ start(): void
	+ stop(): void
	+ startBlinking(): void
	+ stopBlinking(): void
	- updateBlinking(): void
	- updateAnimation(): void
	+ draw(graphics: Graphics, x: int, y: int, width: int, height: int): void
	+ getWidth(): int
	+ getHeight(): int
}




PlayerVisitor <|-- PlayerInvincibleVisitor
Cell <|-- GroundCell
StormTrooper +-- StormTrooper$StormTrooperInteractionVisitor
GhostInteractionVisitor <|-- StormTrooper$StormTrooperInteractionVisitor
PlayerVisitor <|-- PlayerDeadVisitor
Pellet <|-- SuperPellet
PlayerVisitor <|-- PlayerNormalVisitor
Level +-- Level$EntityTask
Runnable <|.. Level$EntityTask
Level +-- Level$LevelObserver
Interactor <|.. Ghost
MovableEntity <|-- Ghost
Ghost +-- Ghost$GhostInteractionVisitor
AbstractInteractionVisitor <|-- Ghost$GhostInteractionVisitor
Entity <|-- SpeechBubble
SpeechBubble +-- SpeechBubble$SpeechBubbleSprite
Sprite <|.. SpeechBubble$SpeechBubbleSprite
Pathfinding +-- Pathfinding$Node
Sprite <|.. DefaultSprite
Cell <|-- WallCell
Sprite <|.. ColorSprite
Cell <|-- DoorCell
Entity <|-- Pellet
JFrame <|-- GameFrame
GameFrame +-- GameFrame$KeyListener
KeyAdapter <|-- GameFrame$KeyListener
Sith +-- Sith$SithInteractionVisitor
GhostInteractionVisitor <|-- Sith$SithInteractionVisitor
Entity <|-- MovableEntity
InteractionVisitor <|.. AbstractInteractionVisitor
Luke +-- Luke$LukeInteractionVisitor
GhostInteractionVisitor <|-- Luke$LukeInteractionVisitor
JPanel <|-- ButtonPanel
Interactor <|.. Player
MovableEntity <|-- Player
AbstractInteractionVisitor <|-- PlayerVisitor
Sprite <|.. ImageSprite
JPanel <|-- LevelPanel
LevelObserver <|.. GameWindow
GameWindow +-- GameWindow$InstanceHolder
Vader +-- Vader$VaderInteractionVisitor
GhostInteractionVisitor <|-- Vader$VaderInteractionVisitor
Interactable <|.. Entity
SpriteRegister <|-- PacmanSprites
Sprite <|.. AnimatedSprite
@enduml
